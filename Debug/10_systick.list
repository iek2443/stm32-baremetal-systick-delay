
10_systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000378  08000380  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000378  08000378  00001380  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000378  08000378  00001380  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000378  08000380  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000378  08000378  00001378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800037c  0800037c  0000137c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001380  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000426  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000173  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00001950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003e  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001006  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004b5  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000408d  00000000  00000000  00002ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006f36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c8  00000000  00000000  00006f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000360 	.word	0x08000360

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000360 	.word	0x08000360

080001c8 <main>:
// Main Function
// ==============================

uint32_t adc_value;

int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

    GPIO_init();  // Initialize GPIOD pin 15 as output (LED)
 80001cc:	f000 f818 	bl	8000200 <GPIO_init>

    while (1) {

        GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);   // Turn LED on
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001d6:	4809      	ldr	r0, [pc, #36]	@ (80001fc <main+0x34>)
 80001d8:	f000 f830 	bl	800023c <GPIO_WritePin>
        systickDelayMs(1000);                     // 1 second delay
 80001dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001e0:	f000 f846 	bl	8000270 <systickDelayMs>
        GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET); // Turn LED off
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001ea:	4804      	ldr	r0, [pc, #16]	@ (80001fc <main+0x34>)
 80001ec:	f000 f826 	bl	800023c <GPIO_WritePin>
        systickDelayMs(1000);                     // 1 second delay
 80001f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001f4:	f000 f83c 	bl	8000270 <systickDelayMs>
        GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);   // Turn LED on
 80001f8:	bf00      	nop
 80001fa:	e7e9      	b.n	80001d0 <main+0x8>
 80001fc:	40020c00 	.word	0x40020c00

08000200 <GPIO_init>:

// ==============================
// GPIO Initialization
// ==============================

void GPIO_init(void){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0

    // Enable clock access to GPIOD
    RCC->AHB1ENR |= GPIODEN;
 8000204:	4b0b      	ldr	r3, [pc, #44]	@ (8000234 <GPIO_init+0x34>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000208:	4a0a      	ldr	r2, [pc, #40]	@ (8000234 <GPIO_init+0x34>)
 800020a:	f043 0308 	orr.w	r3, r3, #8
 800020e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PD15 as general-purpose output (MODER15 = 01)
    GPIOD->MODER |= (1U << 30);
 8000210:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <GPIO_init+0x38>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	@ (8000238 <GPIO_init+0x38>)
 8000216:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800021a:	6013      	str	r3, [r2, #0]
    GPIOD->MODER &= ~(1U << 31);
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <GPIO_init+0x38>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	@ (8000238 <GPIO_init+0x38>)
 8000222:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000226:	6013      	str	r3, [r2, #0]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40023800 	.word	0x40023800
 8000238:	40020c00 	.word	0x40020c00

0800023c <GPIO_WritePin>:

// ==============================
// GPIO Write Pin
// ==============================

void GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, pin_status status) {
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	460b      	mov	r3, r1
 8000246:	807b      	strh	r3, [r7, #2]
 8000248:	4613      	mov	r3, r2
 800024a:	707b      	strb	r3, [r7, #1]
    if (status == SET) {
 800024c:	787b      	ldrb	r3, [r7, #1]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d103      	bne.n	800025a <GPIO_WritePin+0x1e>
        GPIOx->BSRR = GPIO_Pin;             // Set the pin
 8000252:	887a      	ldrh	r2, [r7, #2]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (GPIO_Pin << 16);      // Reset the pin
    }
}
 8000258:	e003      	b.n	8000262 <GPIO_WritePin+0x26>
        GPIOx->BSRR = (GPIO_Pin << 16);      // Reset the pin
 800025a:	887b      	ldrh	r3, [r7, #2]
 800025c:	041a      	lsls	r2, r3, #16
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	619a      	str	r2, [r3, #24]
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
	...

08000270 <systickDelayMs>:

// ==============================
// SysTick-based Delay
// ==============================

void systickDelayMs(int delay){
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]

    /* Load the number of ticks for 1ms delay into the reload register */
    SysTick->RVR = SYSTICK_RVR_VAL;
 8000278:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <systickDelayMs+0x50>)
 800027a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800027e:	605a      	str	r2, [r3, #4]

    /* Clear the current value register */
    SysTick->CVR = 0;
 8000280:	4b0f      	ldr	r3, [pc, #60]	@ (80002c0 <systickDelayMs+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]

    /* Enable SysTick timer and select processor clock (AHB) */
    SysTick->CSR = CSR_ENABLE | CSR_CLKSRC;
 8000286:	4b0e      	ldr	r3, [pc, #56]	@ (80002c0 <systickDelayMs+0x50>)
 8000288:	2205      	movs	r2, #5
 800028a:	601a      	str	r2, [r3, #0]

    /* Perform the required number of delays */
    for(int i = 0; i < delay; i++) {
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e009      	b.n	80002a6 <systickDelayMs+0x36>
        /* Wait until COUNTFLAG is set */
        while((SysTick->CSR & CSR_COUNTFLAG) == 0) {
            __asm__("nop"); // Prevent optimization
 8000292:	bf00      	nop
        while((SysTick->CSR & CSR_COUNTFLAG) == 0) {
 8000294:	4b0a      	ldr	r3, [pc, #40]	@ (80002c0 <systickDelayMs+0x50>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0f8      	beq.n	8000292 <systickDelayMs+0x22>
    for(int i = 0; i < delay; i++) {
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	dbf2      	blt.n	8000294 <systickDelayMs+0x24>
        }
    }

    /* Disable SysTick after delay is complete */
    SysTick->CSR = 0;
 80002ae:	4b04      	ldr	r3, [pc, #16]	@ (80002c0 <systickDelayMs+0x50>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	bf00      	nop
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c4:	480d      	ldr	r0, [pc, #52]	@ (80002fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002cc:	480c      	ldr	r0, [pc, #48]	@ (8000300 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ce:	490d      	ldr	r1, [pc, #52]	@ (8000304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000308 <LoopForever+0xe>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a0a      	ldr	r2, [pc, #40]	@ (800030c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000310 <LoopForever+0x16>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f2:	f000 f811 	bl	8000318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ff67 	bl	80001c8 <main>

080002fa <LoopForever>:

LoopForever:
  b LoopForever
 80002fa:	e7fe      	b.n	80002fa <LoopForever>
  ldr   r0, =_estack
 80002fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000308:	08000380 	.word	0x08000380
  ldr r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000310:	2000001c 	.word	0x2000001c

08000314 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC_IRQHandler>
	...

08000318 <__libc_init_array>:
 8000318:	b570      	push	{r4, r5, r6, lr}
 800031a:	4d0d      	ldr	r5, [pc, #52]	@ (8000350 <__libc_init_array+0x38>)
 800031c:	4c0d      	ldr	r4, [pc, #52]	@ (8000354 <__libc_init_array+0x3c>)
 800031e:	1b64      	subs	r4, r4, r5
 8000320:	10a4      	asrs	r4, r4, #2
 8000322:	2600      	movs	r6, #0
 8000324:	42a6      	cmp	r6, r4
 8000326:	d109      	bne.n	800033c <__libc_init_array+0x24>
 8000328:	4d0b      	ldr	r5, [pc, #44]	@ (8000358 <__libc_init_array+0x40>)
 800032a:	4c0c      	ldr	r4, [pc, #48]	@ (800035c <__libc_init_array+0x44>)
 800032c:	f000 f818 	bl	8000360 <_init>
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	2600      	movs	r6, #0
 8000336:	42a6      	cmp	r6, r4
 8000338:	d105      	bne.n	8000346 <__libc_init_array+0x2e>
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000340:	4798      	blx	r3
 8000342:	3601      	adds	r6, #1
 8000344:	e7ee      	b.n	8000324 <__libc_init_array+0xc>
 8000346:	f855 3b04 	ldr.w	r3, [r5], #4
 800034a:	4798      	blx	r3
 800034c:	3601      	adds	r6, #1
 800034e:	e7f2      	b.n	8000336 <__libc_init_array+0x1e>
 8000350:	08000378 	.word	0x08000378
 8000354:	08000378 	.word	0x08000378
 8000358:	08000378 	.word	0x08000378
 800035c:	0800037c 	.word	0x0800037c

08000360 <_init>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr

0800036c <_fini>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr
